DEFINE_UI_PARAMS(threshold_c, threshold c, DCTLUI_SLIDER_FLOAT, 0.2f, 0.0f, 0.6f, 0.0f);
DEFINE_UI_PARAMS(threshold_m, threshold m, DCTLUI_SLIDER_FLOAT, 0.2f, 0.0f, 0.6f, 0.0f);
DEFINE_UI_PARAMS(threshold_y, threshold y, DCTLUI_SLIDER_FLOAT, 0.2f, 0.0f, 0.6f, 0.0f);
DEFINE_UI_PARAMS(power, power, DCTLUI_SLIDER_FLOAT, 1.2f, 1.0f, 3.0f, 1.0f);
DEFINE_UI_PARAMS(shd_rolloff, shd rolloff, DCTLUI_SLIDER_FLOAT, 0.0f, 0.0f, 0.03f, 0.0f);
DEFINE_UI_PARAMS(cyan, cyan, DCTLUI_SLIDER_FLOAT, 0.09f, 0.0f, 1.0f, 0.0f);
DEFINE_UI_PARAMS(magenta, magenta, DCTLUI_SLIDER_FLOAT, 0.24f, 0.0f, 1.0f, 0.0f);
DEFINE_UI_PARAMS(yellow, yellow, DCTLUI_SLIDER_FLOAT, 0.12f, 0.0f, 1.0f, 0.0f);
DEFINE_UI_PARAMS(cmethod, method, DCTLUI_COMBO_BOX, 2, {L, R, P, E, A, T}, {log, reinhard, power, exp, arctan, tanh});
DEFINE_UI_PARAMS(working_colorspace, working space, DCTLUI_COMBO_BOX, 0, {acescct, acescc, acescg}, {acescct, acescc, acescg});
DEFINE_UI_PARAMS(hexagonal, hexagonal, DCTLUI_CHECK_BOX, 0);
DEFINE_UI_PARAMS(invert, invert, DCTLUI_CHECK_BOX, 0);

__CONSTANT__ float pi = 3.14159265359f;

// Convert acescg to acescct
__DEVICE__ float lin_to_acescct(float in) {
  if (in <= 0.0078125f) {
    return 10.5402377416545f * in + 0.0729055341958355f;
  } else {
    return (_log2f(in) + 9.72f) / 17.52f;
  }
}

// Convert acescct to acescg
__DEVICE__ float acescct_to_lin(float in) {
  if (in > 0.155251141552511f) {
    return _powf( 2.0f, in*17.52f - 9.72f);
  } else {
    return (in - 0.0729055341958355f) / 10.5402377416545f;
  }
}

// Convert acescg to acescc
__DEVICE__ float lin_to_acescc(float in) {
  if (in <= 0.0f) {
    return -0.3584474886f;
  } else if (in < _powf(2.0f, -15.0f)) {
    return (_log2f(_powf(2.0f, -16.0f) + in * 0.5f) + 9.72f) / 17.52f;
  } else {
    return (_log2f(in) + 9.72f) / 17.52f;
  }
}

// Convert acescc to acescg
__DEVICE__ float acescc_to_lin(float in) {
  if (in < -0.3013698630f) {
    return (_powf( 2.0f, in * 17.52f - 9.72f) - _powf( 2.0f, -16.0f)) * 2.0f;
  } else if (in < (_log2f(65504.0f)+9.72f)/17.52f) {
    return _powf(2.0f, in * 17.52f - 9.72f);
  } else {
    return 65504.0f;
  }
}

// compression function which gives the y=1 x intersect at y=0
__DEVICE__ float f(float x, float k, float thr, int method) {
  if (method == 0) {
    // natural logarithm compression method
    return (_expf((1.0f-thr+thr*log(1.0f-x)-x*thr*log(1.0f-x))/(thr*(1.0f-x))))*thr+x*thr-k;
  } else if (method == 1 || method == 2) {
    return k;
  } else if (method == 3) {
    // natural exponent compression method
    return -_logf((-x+1.0f)/(thr-x))*(-thr+x)+thr-k;
  } else if (method == 4) {
    // arctangent compression method
    return (2.0f*_tanf( (pi*(1.0f-thr))/(2.0f*(x-thr)))*(x-thr))/pi+thr-k;
  } else if (method == 5) {
    // hyperbolic tangent compression method
    return _atanhf((1.0f-thr)/(x-thr))*(x-thr)+thr-k;
  }
}

__DEVICE__ int _sign(float x) {
    return x == 0.0f ? 0 : x > 0.0f ? 1 : 0;
  }

__DEVICE__ float bisect(float k, float thr, int method) {
  // use a simple bisection algorithm to bruteforce the root of f
  // returns an approximation of the value of limit 
  // such that the compression function intersects y=1 at desired value k
  // this allows us to specify the max distance we will compress to the gamut boundary
  
  float a, b, c, y;
  float tol = 0.0001f; // accuracy of estimate
  int nmax = 100; // max iterations

  // set up reasonable initial guesses for each method given output ranges of each function
  if (method == 0) {
    // natural logarithm needs a limit between -inf (linear), and 1 (clip)
    a = -15.0f;
    b = 0.98f;
  } else if (method == 5) {
    // tanh needs more precision
    a = 1.000001f;
    b = 5.0f;
  } else {
    a = 1.0001f;
    b = 5.0f;
  }

  if (_sign(f(a, k, thr, method)) == _sign(f(b, k, thr, method))) {
    // bad estimate. return something close to linear
    if ((method == 0) || (method == 3)) {
      return -100.0f;
    } else {
      return 1.999999f;
    }
  }
  c = (a+b)/2.0f;
  y = f(c, k, thr, method);
  if (_fabs(y) <= tol) {
    return c; // lucky guess
  }
  int n = 1;
  while ((_fabs(y) > tol) && (n <= nmax)) {
    if (_sign(y) == _sign(f(a, k, thr, method))) {
      a = c;
    } else {
      b = c;
    }
    c = (a+b)/2.0f;
    y = f(c, k, thr, method);
    n += 1;
  }
  return c;
}

// calculate compressed distance
__DEVICE__ float compress(float dist, float lim, float thr, bool invert, int method, float power) {
  float cdist, s;
  if (dist < thr) {
    cdist = dist;
  } else {
    if (method == 0) {
      // natural logarithm compression method: https://www.desmos.com/calculator/hmzirlw7tj
      // inspired by ITU-R BT.2446 http://www.itu.int/pub/R-REP-BT.2446-2019
      if (invert == 0) {
        cdist = thr*log(dist/thr-lim)-lim*thr*log(dist/thr-lim)+thr-thr*log(1.0f-lim)+lim*thr*log(1.0f-lim);
      } else {
        cdist = _expf((dist-thr+thr*log(1.0f-lim)-lim*thr*log(1.0f-lim))/(thr*(1.0f-lim)))*thr+lim*thr;
      }
    } else if (method == 1) {
      // simple Reinhard type compression method: https://www.desmos.com/calculator/lkhdtjbodx
      if (invert == 0) {
        cdist = thr + 1.0f/(1.0f/(dist - thr) + 1.0f/(1.0f - thr) - 1.0f/(lim - thr));
      } else {
        cdist = thr + 1.0f/(1.0f/(dist - thr) - 1.0f/(1.0f - thr) + 1.0f/(lim - thr));
      }
    } else if (method == 2) {
      // power(p) compression function plot https://www.desmos.com/calculator/54aytu7hek
      if (lim < 1.0001f) {
        return dist; // disable compression, avoid nan
      }
      s = (lim-thr)/_powf(_powf((1.0f-thr)/(lim-thr),-power)-1.0f,1.0f/power); // calc y=1 intersect
      if (invert == 0) {
        cdist = thr+s*((dist-thr)/s)/(_powf(1.0f+_powf((dist-thr)/s,power),1.0f/power)); // compress
      } else {
        if (dist > (thr + s)) {
          cdist = dist; // avoid singularity
        }
        cdist = thr+s*_powf(-(_powf((dist-thr)/s,power)/(_powf((dist-thr)/s,power)-1.0f)),1.0f/power); // uncompress
      }
    } else if (method == 3) {
      // natural exponent compression method: https://www.desmos.com/calculator/s2adnicmmr
      if (invert == 0) {
        cdist = lim-(lim-thr)*_expf(-(((dist-thr)*((1.0f*lim)/(lim-thr))/lim)));
      } else {
        cdist = -log((dist-lim)/(thr-lim))*(-thr+lim)/1.0f+thr;
      }
    } else if (method == 4) {
      // arctangent compression method: plot https://www.desmos.com/calculator/olmjgev3sl
      if (invert == 0) {
        cdist = thr + (lim - thr) * 2.0f / pi * _atan2f(pi/2.0f * (dist - thr)/(lim - thr), 1.0f);
      } else {
        cdist = thr + (lim - thr) * 2.0f / pi * _tanf(pi/2.0f * (dist - thr)/(lim - thr));
      }
    } else if (method == 5) {
      // hyperbolic tangent compression method: https://www.desmos.com/calculator/xiwliws24x
      if (invert == 0) {
        cdist = thr + (lim - thr) * _tanhf( ( (dist - thr)/( lim - thr)));
      } else {
        cdist = thr + (lim - thr) * _atanhf( dist/( lim - thr) - thr/( lim - thr));
      }
    }
  }
  return cdist;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) 
{ 
  // ^-- this is necessary for the DCTL to work!

  // source pixels
  float3 rgb = make_float3(p_R, p_G, p_B);
  
  if (working_colorspace == acescct) {
    rgb.x = acescct_to_lin(rgb.x);
    rgb.y = acescct_to_lin(rgb.y);
    rgb.z = acescct_to_lin(rgb.z);
  }
  if (working_colorspace == acescc) {
    rgb.x = acescc_to_lin(rgb.x);
    rgb.y = acescc_to_lin(rgb.y);
    rgb.z = acescc_to_lin(rgb.z);
  }

  // set up method
  int method;
  if (cmethod == L) {
    method = 0;
  } else if (cmethod == R) {
    method = 1;
  } else if (cmethod == P) {
    method = 2;
  } else if (cmethod == E) {
    method = 3;
  } else if (cmethod == A) {
    method = 4;
  } else if (cmethod == T) {
    method = 5;
  }

  // thr is the percentage of the core gamut to protect: the complement of threshold.
  float3 thr = make_float3(
    1.0f-_fmaxf(0.00001, threshold_c),
    1.0f-_fmaxf(0.00001, threshold_m),
    1.0f-_fmaxf(0.00001, threshold_y));
  
  // lim is the max distance from the gamut boundary that will be compressed
  // 0 is a no-op, 1 will compress colors from a distance of 2.0 from achromatic to the gamut boundary
  // if method is reinhard or power, use the limit as-is
  float3 lim;
  if (method == 1 || method == 2) {
    lim = make_float3(cyan+1.0f, magenta+1.0f, yellow+1.0f);
  } else {
    // otherwise, we have to bruteforce the value of limit 
    // such that lim is the value of x where y=1 - also enforce sane ranges to avoid nans

    // Not sure of a way to pre-calculate a constant using the values from the ui parameters in Resolve DCTL...
    // This approach might have performance implications
    lim = make_float3(
      bisect(_fmaxf(0.0001f, cyan)+1.0f, thr.x, method),
      bisect(_fmaxf(0.0001f, magenta)+1.0f, thr.y, method),
      bisect(_fmaxf(0.0001f, yellow)+1.0f, thr.z, method));
  }

  // achromatic axis 
  float ach = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));

  // achromatic shadow rolloff
  float ach_shd;
  if (shd_rolloff < 0.004f) {
    // disable shadow rolloff functionality. 
    // values below 0.004 cause strange behavior, actually increasing distance in some cases.
    // if ach < 0.0 and shd_rolloff is disabled, take absolute value. This preserves negative components after compression.
    ach_shd = _fabs(ach);
  } else {
    // lift ach below threshold using a tanh compression function. 
    // this reduces large distance values in shadow grain, which can cause differences when inverting.
    ach_shd = 1.0f-((1.0f-ach)<(1.0f-shd_rolloff)?(1.0f-ach):(1.0f-shd_rolloff)+shd_rolloff*_tanhf((((1.0f-ach)-(1.0f-shd_rolloff))/shd_rolloff)));
  } 
  
  // distance from the achromatic axis for each color component aka inverse rgb ratios
  float3 dist;
  dist.x = ach_shd == 0.0f ? 0.0f : (ach-rgb.x)/ach_shd;
  dist.y = ach_shd == 0.0f ? 0.0f : (ach-rgb.y)/ach_shd;
  dist.z = ach_shd == 0.0f ? 0.0f : (ach-rgb.z)/ach_shd;

  // compress distance with user controlled parameterized shaper function
  float sat;
  float3 csat, cdist;
  if (hexagonal) {
    // Based on Nick Shaw's variation on the gamut mapping algorithm 
    // https://community.acescentral.com/t/a-variation-on-jeds-rgb-gamut-mapper/3060
    sat = _fmaxf(dist.x, _fmaxf(dist.y, dist.z));
    csat = make_float3(
      compress(sat, lim.x, thr.x, invert, method, power),
      compress(sat, lim.y, thr.y, invert, method, power),
      compress(sat, lim.z, thr.z, invert, method, power));
    cdist = sat == 0.0f ? dist : make_float3(
      dist.x * csat.x / sat,
      dist.y * csat.y / sat,
      dist.z * csat.z / sat);
  } else {
    cdist = make_float3(
      compress(dist.x, lim.x, thr.x, invert, method, power),
      compress(dist.y, lim.y, thr.y, invert, method, power),
      compress(dist.z, lim.z, thr.z, invert, method, power));
  }

  // recalculate rgb from compressed distance and achromatic
  // effectively this scales each color component relative to achromatic axis by the compressed distance
  float3 crgb = make_float3(
    ach-cdist.x*ach_shd,
    ach-cdist.y*ach_shd,
    ach-cdist.z*ach_shd);

  if (working_colorspace == acescct) {
    crgb.x = lin_to_acescct(crgb.x);
    crgb.y = lin_to_acescct(crgb.y);
    crgb.z = lin_to_acescct(crgb.z);
  }
  if (working_colorspace == acescc) {
    crgb.x = lin_to_acescc(crgb.x);
    crgb.y = lin_to_acescc(crgb.y);
    crgb.z = lin_to_acescc(crgb.z);
  }

  // write output
  return crgb;
}